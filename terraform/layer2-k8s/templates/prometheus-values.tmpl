# Prometheus Server parameters
prometheus:
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/whitelist-source-range: ${ip_whitelist}
    path: /prometheus
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: eks.amazonaws.com/capacityType
              operator: In
              values:
                - ON_DEMAND

prometheusOperator:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/capacityType
            operator: In
            values:
              - ON_DEMAND

# Grafana settings
grafana:
  enabled: true
  image:
    tag: 7.2.0
  deploymentStrategy:
    type: Recreate
  adminPassword: "${grafana_password}"
  serviceAccount:
    annotations:
      "eks.amazonaws.com/role-arn": ${role_arn}
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    path: /grafana
  env:
    # all values must be quoted
    GF_SERVER_ROOT_URL: "https://${grafana_domain_name}/grafana"
    GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    GF_USERS_ALLOW_SIGN_UP: "false"
    GF_SECURITY_ADMIN_USER: "admin"
    GF_SECURITY_ADMIN_PASSWORD: "admin"

  persistence:
    enabled: false
    accessModes: ["ReadWriteOnce"]
    size: 5Gi

  sidecar:
    datasources:
      enabled: true

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: CloudWatch
          type: cloudwatch
          jsonData:
            authType: credentials
            defaultRegion: "${default_region}"
        - name: Loki
          type: loki
          url: http://loki-stack:3100
          jsonData:
            maxLines: 1000

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'logs'
        orgId: 1
        folder: 'logs'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/logs
      - name: 'k8s'
        orgId: 1
        folder: 'k8s'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/k8s

  dashboards:
    logs:
      logs:
        ## Dashboard for quick search application logs for loki with two datasources loki and prometheus - https://grafana.com/grafana/dashboards/12019
        url: https://grafana-dashboards.maddevs.org/common/aws-eks-base/loki-dashboard-quick-search.json

    k8s:
      nginx-ingress:
      ## Dashboard for nginx-ingress metrics - https://grafana.com/grafana/dashboards/9614
        gnetId: 9614
        datasource: Prometheus
      loki-promtail:
      ## Dashboard for loki and promtail metrics - https://grafana.com/grafana/dashboards/10880
        gnetId: 10880
        datasource: Prometheus
      cluster-autoscaler:
      ## Dashboard for cluster-autoscaler metrics - https://grafana.com/grafana/dashboards/3831
        gnetId: 3831
        datasource: Prometheus

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/capacityType
            operator: In
            values:
              - SPOT